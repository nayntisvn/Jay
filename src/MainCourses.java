
import java.sql.DriverManager;
import java.sql.*;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author CS182P-BC2-13
 */
public class MainCourses extends javax.swing.JFrame {

    Statement statement;
    Connection conn;
    String url = "jdbc:mysql://127.0.0.1/enrolment?zeroDateTimeBehavior=convertToNull";
    String user = "root";
    String password = "12345";
    String imp = "Select a.`Course Code`, b.section, a.units, CONCAT(b.day, '/', b.time, '/', b.room) as Schedule, b.professor FROM courses a, schedule b WHERE a.`Course Code` = b.`Course Code`";
    
    ArrayList<Course> courses= new ArrayList<>();
    ArrayList<Schedule> schedules= new ArrayList<>();
    ArrayList<CSchedule> cschedule= new ArrayList<>();
    ArrayList<CSchedule> enrolled= new ArrayList<>();
    ArrayList<Schedule> unavailSchedules= new ArrayList<>();
    /**
     * Creates new form MainCourses
     */
    
    Thread t1 = new Thread()
    {
            public synchronized void run(){
                while (true)
                {
                    schedules.sort(Comparator.comparing(Schedule::getCourseCode));
                    DisplaySchedule();
                    try
                    {
                        Thread.sleep(2500);
                    }
                    catch(Exception e)
                    {
                        
                    }
                }
            }
    };
    
    Thread t2 = new Thread()
    {
            public synchronized void run(){
                while (true)
                {
                    enrolled.sort(Comparator.comparing(CSchedule::getCourseCode));
                    DisplayCSchedules();
                    try
                    {
                        Thread.sleep(2500);
                    }
                    catch(Exception e)
                    {
                        
                    }
                }
            }
    };
    
    public MainCourses() {
        initComponents();
        
        try
        {          
            conn = DriverManager.getConnection(url,user,password);
            statement = conn.createStatement();
            System.out.println("Conencted");
        }catch(Exception e)
        {
            System.out.println(e);
        }
        try {
            
            String queryCheck = "SELECT * from courses ORDER BY `COURSE CODE` ASC";
            PreparedStatement ps = conn.prepareStatement(queryCheck);
            ResultSet rs = ps.executeQuery();

            while(rs.next()) {
                courses.add(new Course(rs.getString("COURSE CODE"),rs.getString("COURSE TITLE"),rs.getInt("UNITS"),rs.getDouble("TUITION FEE"),rs.getDouble("LFD FEE")));
            }
            ////////////////////////////////////////////////////
            queryCheck = "SELECT * from schedule ORDER BY `COURSE CODE` ASC";
            ps = conn.prepareStatement(queryCheck);
            rs = ps.executeQuery();

            while(rs.next()) {
                schedules.add(new Schedule(rs.getString("COURSE CODE"),rs.getString("SECTION"),rs.getString("DAY"),rs.getString("TIME"),rs.getString("ROOM"),rs.getString("PROFESSOR")));
            }
            
            ////////////////////////////////////////////////////
            queryCheck = imp;
            ps = conn.prepareStatement(queryCheck);
            rs = ps.executeQuery();
               
            while(rs.next()) {
                cschedule.add(new CSchedule(rs.getString("COURSE CODE"),rs.getString("SECTION"),rs.getInt("UNITS"),rs.getString("SCHEDULE"),rs.getString("PROFESSOR")));
            }
            
        } catch (Exception e) {
            System.err.println(e);
        }
        
        DisplaySchedule();
        
        t1.start();
        t2.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "COURSE CODE", "SECTION", "DAY", "TIME", "ROOM", "PROFESSOR"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "COURSE CODE", "SECTION", "UNITS", "SCHEDULE(DAY,TIME,ROOM)", "PROFESSOR"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTable2);

        jButton1.setText("Add Selected Courses");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Remove");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 581, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(99, 99, 99)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addGap(29, 29, 29))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        int i =  jTable1.getSelectedRow();
        if(i != -1)
        {                       
            for (Course course: courses) 
            {
                if(course.getCourseCode().equals(schedules.get(i).getCourseCode()))
                {
                    unavailSchedules.add(schedules.get(i));                   
                    enrolled.add(new CSchedule(course.getCourseCode(),schedules.get(i).getSection(),course.getUnits(),schedules.get(i).getDay() + " " + schedules.get(i).getTime(),schedules.get(i).getProfessor()));
                    schedules.remove(i);
                    
                    DisplayCSchedules();
                    DisplaySchedule();
                    
                    break;
                }
            }
    
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        
        int i =  jTable2.getSelectedRow();      
        if (i != -1) {
            for(Schedule schedule: unavailSchedules)  
            {
                if(enrolled.get(i).getCourseCode().equals(schedule.getCourseCode()))
                {
                    schedules.add(new Schedule(schedule.getCourseCode(),schedule.getSection(),schedule.getTime(),schedule.getDay(),schedule.getRoom(),schedule.getProfessor()));
                    enrolled.remove(i);   
                    
                    DisplayCSchedules();
                    DisplaySchedule();
                    
                    break;
                }
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed
    
    public void DisplaySchedule()
    {
        DefaultTableModel model = null;
        model = (DefaultTableModel) jTable1.getModel();
        
        model.setRowCount(0);
        
        for (Schedule schedule : schedules) 
        {           
            Object[] row = { schedule.getCourseCode(),schedule.getSection(),schedule.getTime(),schedule.getDay(),schedule.getRoom(),schedule.getProfessor()};
            model.addRow(row);
        }
    }
    
    private void DisplayCSchedules()
    {
        DefaultTableModel model = null;
        model = (DefaultTableModel) jTable2.getModel();
        
        model.setRowCount(0);
        
        for (CSchedule course : enrolled) 
        {           
            Object[] row = {course.getCourseCode(),course.getSection(),course.getUnits(),course.getSchedule(),course.getProfessor()};
            model.addRow(row);
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainCourses.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainCourses.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainCourses.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainCourses.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainCourses().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    // End of variables declaration//GEN-END:variables
}
